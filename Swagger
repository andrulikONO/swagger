openapi: 3.0.0
info:
  title: Книжный магазин 
  version: 2.0.0
  description: Управление книгами, авторами и заказами

paths:
  /books:
    get:
      tags: [Книги]
      summary: Поиск книг
      description: Фильтрация по жанру, наличию и другим параметрам
      parameters:
        - $ref: '#/components/parameters/genreFilter'
        - $ref: '#/components/parameters/inStockFilter'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/pageSizeParam'
      responses:
        '200':
          description: Отфильтрованный список книг
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
   
    post:
      tags: [Книги]
      summary: Добавить новую книгу
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Автор успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'


  /books/{bookId}:
    get:
      tags: [Книги]
      summary: Получить детальную информацию о книге
      parameters:
        - $ref: '#/components/parameters/bookIdPath'
      responses:
        '200':
          description: Детальная информация о книге
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDetails'
    
    delete:
      tags: [Книги]
      summary: Удалить книгу
      parameters:
        - $ref: '#/components/parameters/bookIdPath'
      responses:
        '200':
          description: Книга успешно удалена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'

  /authors:
    get:
      tags: [Авторы]
      summary: Список авторов
      parameters:
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/pageSizeParam'
      responses:
        '200':
          description: Список авторов с пагинацией
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorListResponse'
     
    post:
      tags: [Авторы]
      summary: Добавить нового автора
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorInput'
      responses:
        '201':
          description: Автор успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'

  /authors/{authorId}:              
    delete:
      tags: [Авторы]
      summary: Удалить автора
      parameters:
        - $ref: "#/components/parameters/authorIdPath"
      responses:
        '200':
          description: Книга успешно удалена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage1'


  /orders:
    post:
      tags: [Заказы]
      summary: Оформить заказ
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Заказ успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
          headers:
            Location:
              description: Ссылка на созданный заказ
              schema:
                type: string
    
    get:
      tags: [Заказы]
      summary: История заказов
      parameters:
        - $ref: '#/components/parameters/userIdQuery'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/pageSizeParam'
      responses:
        '200':
          description: Список заказов пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
                


  /orders/check-status:
    get:
      tags: [Заказы]
      summary: Проверить статус заказа
      parameters:
        - $ref: '#/components/parameters/orderNumberQuery'
      responses:
        '200':
          description: Текущий статус заказа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatus'
        '404':
          description: Заказ не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

components:
  schemas:
    # Основные модели
    Book:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "Book_1"
        title:
          type: string
          example: "Мастер и Маргарита"
        author:
          $ref: '#/components/schemas/AuthorShort'
        price:
          type: number
          format: float
          example: 450.50
        coverImage:
          type: string
          format: uri
          example: "https://example.com/covers/master.jpg"
        genre:
          type: string
          example: "Роман"
        inStock:
          type: boolean
          example: True
      required: [id, title, author, price]

    BookDetails:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            description:
              type: string
              example: "Один из величайших романов XX века"
            pages:
              type: integer
              example: 480
            inStock:
              type: boolean
              example: True
            publicationDate:
              type: string
              format: date
              example: "1967-01-01"

    Author:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "Author_1"
        name:
          type: string
          example: "Михаил Булгаков"
        birthDate:
          type: string
          format: date
          example: "1891-05-15"
        country:
          type: string
          example: "Россия"
        bio:
          type: string
          example: "Русский писатель, драматург"
        photo:
          type: string
          format: uri
          example: "https://example.com/authors/bulgakov.jpg"
      required: [id, name]

    AuthorShort:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "Author_1"
        name:
          type: string
          example: "Михаил Булгаков"
      required: [id, name]

    Order:
      type: object
      properties:
        orderNumber:
          type: string
          example: "Order_1"
          description: Публичный номер заказа
        userId:
          type: string
          format: uuid
          example: "User_1"
        status:
          type: string
          enum: [создан, оплачен, собран, отправлен, доставлен, отменен]
          example: "создан"
        createdAt:
          type: string
          format: date-time
          example: "20-04-2025|14:30:00"
        totalAmount:
          type: number
          format: float
          example: 1250.50
      required: [orderNumber, userId, status, createdAt, totalAmount]

    OrderDetails:
      allOf:
        - $ref: '#/components/schemas/Order'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrderItem'
            shippingAddress:
              type: string
              example: "г. Москва, ул. Примерная, д. 1, кв. 2"
            contactPhone:
              type: string
              example: "+79161234567"
            deliveryMethod:
              type: string
              example: "курьер"
            paymentMethod:
              type: string
              example: "карта онлайн"

    OrderItem:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/BookShort'
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: float
          example: 450.50
      required: [book, quantity, price]

    BookShort:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "Book_1"
        title:
          type: string
          example: "Мастер и Маргарита"
        coverImage:
          type: string
          format: uri
          example: "https://example.com/covers/master.jpg"
      required: [id, title]

    # Запросы
    BookInput:
      type: object
      properties:
        title:
          type: string
          example: "Мастер и Маргарита"
        authorId:
          type: string
          format: uuid
          example: "Author_1"
        genre:
          type: string
          example: "Pоман"
        price:
          type: number
          format: float
          example: 450.5
        pages:
          type: integer
          example: 672
        description:
          type: string
        publicationDate:
          type: string
          format: date
          example: "1866-01-01"
        coverImage:
          type: string
          example: "https://example.com/covers/master.jpg"
      required: [title, authorId, price]

    AuthorInput:
      type: object
      properties:
        name:
          type: string
          example: "Фёдор Достоевский"
        birthDate:
          type: string
          format: date
          example: "1821-11-11"
        country:
          type: string
          example: "Россия"
        bio:
          type: string
        photo:
          type: string
          example: "https://example.com/authors/bulgakov.jpg"
      required: [name]

    OrderRequest:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          example: "User_1"
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRequest'
          minItems: 1
        shippingAddress:
          type: string
          example: "г. Москва, ул. Примерная, д. 1, кв. 2"
        contactPhone:
          type: string
          example: "+79161234567"
        deliveryMethod:
          type: string
          enum: [самовывоз, курьер, почта]
          example: "курьер"
        paymentMethod:
          type: string
          enum: [наличные, карта онлайн, карта при получении]
          example: "карта онлайн"
      required: [userId, items, shippingAddress, contactPhone]

    OrderItemRequest:
      type: object
      properties:
        bookId:
          type: string
          format: uuid
          example: "Book_1"
        quantity:
          type: integer
          minimum: 1
          example: 1
      required: [bookId, quantity]

    # Ответы
    BookListResponse:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        pagination:
          $ref: '#/components/schemas/Pagination'

    AuthorListResponse:
      type: object
      properties:
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'
        pagination:
          $ref: '#/components/schemas/Pagination'

    OrderListResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrderResponse'
            
        pagination:
          $ref: '#/components/schemas/Pagination'

    OrderResponse:
      allOf:
        - $ref: '#/components/schemas/Order'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/OrderItem'

    OrderStatus:
      type: object
      properties:
        orderNumber:
          type: string
          example: "Order_1"
        status:
          type: string
          example: "отправлен"
        lastUpdate:
          type: string
          format: date-time
          example: "20-04-2025|10:30:00"
        estimatedDelivery:
          type: string
          format: date
          example: "2023-05-18"

    # Вспомогательные модели
    Pagination:
      type: object
      properties:
        totalItems:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 10
        currentPage:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 10

    SuccessMessage:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Книга успешно удалена"
          
    SuccessMessage1:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Автор успешно удалена"      

    ErrorMessage:
      type: object
      properties:
        error:
          type: string
          example: "Заказ не найден"
        code:
          type: string
          example: "ORDER_NOT_FOUND"

  parameters:
    genreFilter:
      name: genre
      in: query
      description: Фильтр по жанру
      schema:
        type: string
        enum: [фантастика, детектив, роман, научная, детская, биография, поэзия]

    inStockFilter:
      name: inStock
      in: query
      description: Только книги в наличии
      schema:
        type: boolean

    pageParam:
      name: page
      in: query
      description: Номер страницы
      schema:
        type: integer
        minimum: 1
        default: 1

    pageSizeParam:
      name: size
      in: query
      description: Количество элементов на странице
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    bookIdPath:
      name: bookId
      in: path
      required: true
      description: Идентификатор книги
      schema:
        type: string
        format: uuid

    authorIdPath:
      name: authorId
      in: path
      required: true
      description: Идентификатор автора
      schema:
        type: string
        format: uuid

    userIdQuery:
      name: userId
      in: query
      required: true
      description: Идентификатор пользователя
      schema:
        type: string
        format: uuid

    orderNumberPath:
      name: orderNumber
      in: path
      required: true
      description: Номер заказа
      schema:
        type: string
        pattern: '^Order_/d$'
        example: "Order_1"

    orderNumberQuery:
      name: orderNumber
      in: query
      required: true
      description: Номер заказа
      schema:
        type: string
        pattern: '^Order_/d$'
        example: "Order_1"
